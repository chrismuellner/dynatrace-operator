name: Publish images

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

permissions:
  contents: read
  # packages: write
  id-token: write

jobs:

  prepare:
    name: Prepare properties
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Prepare build parameters
        id: prep
        run: |
          hack/build/ci/prepare-build-variables.sh
    outputs:
      labels: ${{ steps.prep.outputs.docker_image_labels }}
      version: ${{ steps.prep.outputs.docker_image_tag }}
      go-linker-args: ${{ steps.prep.outputs.go_linker_args }}
      cgo-cflags: ${{ steps.prep.outputs.cgo_cflags }}
      go-version: "1.19"

  # Workflow needs to build docker images again as separate workflows don't have access to others artifacts
  # https://github.com/actions/download-artifact/issues/3
  build-amd64:
    name: Build image amd64
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: build-image
        uses: ./.github/actions/build-image
        with:
          platform: amd64
          go-version: ${{ needs.prepare.outputs.go-version }}
          go-linker-args: ${{ needs.prepare.outputs.go-linker-args }}
          cgo-cflags: ${{ needs.prepare.outputs.cgo-cflags }}
          labels: ${{ needs.prepare.outputs.labels }}
          image-tag: ${{ needs.prepare.outputs.version }}

  # build-arm64:
  #   name: Build image arm64
  #   runs-on: ubuntu-latest
  #   needs: [prepare]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
  #     - name: Build Image
  #       uses: ./.github/actions/build-image
  #       with:
  #         platform: arm64
  #         go-version: ${{ needs.prepare.outputs.go-version }}
  #         go-linker-args: ${{ needs.prepare.outputs.go-linker-args }}
  #         cgo-cflags: ${{ needs.prepare.outputs.cgo-cflags }}
  #         labels: ${{ needs.prepare.outputs.labels }}
  #         image-tag: ${{ needs.prepare.outputs.version }}

  push:
    name: Push images
    environment: Release
    needs: [prepare, build-amd64]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64]
        registry-name: [gcr, dockerhub]
        include:
          # - registry-name: rhcc
          #   registry-url: scan.connect.redhat.com
          #   repository: RHCC_REPOSITORY
          #   username: RHCC_USERNAME
          #   password: RHCC_PASSWORD
          - registry-name: gcr
            registry-url: gcr.io
            repository: GCR_REPOSITORY
            username: GCR_USERNAME
            password: GCR_JSON_KEY
          - registry-name: dockerhub
            registry-url: quay.io
            repository: DOCKERHUB_REPOSITORY
            username: DOCKERHUB_USERNAME
            password: DOCKERHUB_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Push ${{matrix.platform}} to ${{matrix.registry-name}}
        uses: ./.github/actions/upload-image
        if: matrix.registry-name != 'rhcc' || ( matrix.registry-name == 'rhcc' && matrix.platform == 'amd64' )
        with:
          platform: ${{ matrix.platform }}
          labels: ${{ needs.prepare.outputs.labels }}
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{ matrix.registry-url }}
          repository: ${{ secrets[matrix.repository] }}
          repository-username: ${{ secrets[matrix.username] }}
          repository-password: ${{ secrets[matrix.password] }}
      # - name: Run preflight
      #   if: matrix.registry-name == 'rhcc' && matrix.platform == 'amd64'
      #   uses: ./.github/actions/preflight
      #   with:
      #     version: ${{ needs.prepare.outputs.version }}
      #     registry: ${{matrix.registry-url}}
      #     repository: ${{ secrets[matrix.repository] }}
      #     report-name: "preflight.json"
      #     redhat-project-id: ${{ secrets.REDHAT_PROJECT_ID }}
      #     pyxis-api-token: ${{ secrets.PYXIS_API_TOKEN }}
      #     rhcc-username: ${{ secrets[matrix.username] }}
      #     rhcc-password: ${{ secrets[matrix.password] }}

  manifest:
    name: Create manifests
    environment: Release
    needs: [prepare, push]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry: [gcr, dockerhub]
        include:
          - registry: gcr
            url: gcr.io
            repository: GCR_REPOSITORY
            username: GCR_USERNAME
            password: GCR_JSON_KEY
          - registry: dockerhub
            url: quay.io
            repository: DOCKERHUB_REPOSITORY
            username: DOCKERHUB_USERNAME
            password: DOCKERHUB_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Create manifests for ${{matrix.registry}}
        uses: ./.github/actions/create-manifests
        with:
          version: ${{ needs.prepare.outputs.version }}
          registry: ${{ matrix.url }}
          repository: ${{ secrets[matrix.repository] }}
          combined: false
          repository-username: ${{ secrets[matrix.username] }}
          repository-password: ${{ secrets[matrix.password] }}

  sign:
    name: Sign Images
    environment: Release
    needs: [prepare, manifest]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry: [gcr, dockerhub]
        include:
          - registry: gcr
            url: gcr.io
            repository: GCR_REPOSITORY
            username: GCR_USERNAME
            password: GCR_JSON_KEY
          - registry: dockerhub
            url: quay.io
            repository: DOCKERHUB_REPOSITORY
            username: DOCKERHUB_USERNAME
            password: DOCKERHUB_PASSWORD
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
      - name: Login to Registry
        uses:  docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2
        with:
          registry: ${{ matrix.url }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@b3413d484cc23cf8778c3d2aa361568d4eb54679 # v2.5.1
      - name: Prepare tags
        id: prepare_tags
        run: |
          echo "::set-output name=tags::${IMAGE},${IMAGE}-amd64"
        env:
          IMAGE: ${{ matrix.url }}/${{ secrets[matrix.repository] }}:${{ needs.prepare.outputs.version }}
      - name: Sign image with a key
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY ${TAGS}
        env:
          TAGS: ${{ steps.prepare_tags.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
      - name: Sign the images with GitHub OIDC Token
        run: cosign sign ${TAGS}
        env:
          TAGS: ${{ steps.prepare_tags.outputs.tags }}
          COSIGN_EXPERIMENTAL: true